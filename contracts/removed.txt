from TokenMarketplace.sol

function buyTokens(address tokenAddress, address seller, uint256 amount) external payable {
        TokenListing storage listing = listings[tokenAddress][seller];
        require(listing.active, "Listing is not active");
        require(amount > 0, "Amount must be greater than 0");
        require(amount <= listing.availableTokens, "Not enough tokens available");
        
        // Calculate price
        uint256 totalPrice = listing.pricePerToken * amount;
        require(msg.value >= totalPrice, "Insufficient funds sent");
        
        // Transfer tokens from seller to buyer
        IERC20 token = IERC20(tokenAddress);
        bool success = token.transferFrom(seller, msg.sender, amount);
        require(success, "Token transfer failed");
        
        // Update listing
        listing.availableTokens -= amount;
        if (listing.availableTokens == 0) {
            listing.active = false;
        }
        
        // Transfer ETH to seller
        (bool sent, ) = payable(seller).call{value: totalPrice}("");
        require(sent, "Failed to send ETH to seller");
        
        // Refund excess ETH if any
        uint256 excess = msg.value - totalPrice;
        if (excess > 0) {
            (sent, ) = payable(msg.sender).call{value: excess}("");
            require(sent, "Failed to refund excess ETH");
        }
        
        emit TokensPurchased(tokenAddress, msg.sender, seller, amount, totalPrice);
    }