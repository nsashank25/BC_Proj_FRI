from TokenMarketplace.sol

function buyTokens(address tokenAddress, address seller, uint256 amount) external payable {
        TokenListing storage listing = listings[tokenAddress][seller];
        require(listing.active, "Listing is not active");
        require(amount > 0, "Amount must be greater than 0");
        require(amount <= listing.availableTokens, "Not enough tokens available");
        
        // Calculate price
        uint256 totalPrice = listing.pricePerToken * amount;
        require(msg.value >= totalPrice, "Insufficient funds sent");
        
        // Transfer tokens from seller to buyer
        IERC20 token = IERC20(tokenAddress);
        bool success = token.transferFrom(seller, msg.sender, amount);
        require(success, "Token transfer failed");
        
        // Update listing
        listing.availableTokens -= amount;
        if (listing.availableTokens == 0) {
            listing.active = false;
        }
        
        // Transfer ETH to seller
        (bool sent, ) = payable(seller).call{value: totalPrice}("");
        require(sent, "Failed to send ETH to seller");
        
        // Refund excess ETH if any
        uint256 excess = msg.value - totalPrice;
        if (excess > 0) {
            (sent, ) = payable(msg.sender).call{value: excess}("");
            require(sent, "Failed to refund excess ETH");
        }
        
        emit TokensPurchased(tokenAddress, msg.sender, seller, amount, totalPrice);
    }



entire TokenMarketplace.sol:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./PropertyToken.sol";
import "hardhat/console.sol";

contract TokenMarketplace {
    // Token listing struct
    struct TokenListing {
        address tokenAddress;
        address seller;
        uint256 pricePerToken; // Price in wei per token
        uint256 availableTokens;
        bool active;
    }

    // Mapping from token address to seller address to listing
    mapping(address => mapping(address => TokenListing)) public listings;
    // Array to keep track of all listed tokens
    address[] public listedTokens;
    mapping(address => bool) private tokenExists;

    // Events
    event TokenListed(address indexed tokenAddress, address indexed seller, uint256 pricePerToken, uint256 amount);
    event ListingUpdated(address indexed tokenAddress, address indexed seller, uint256 pricePerToken, uint256 amount);
    event ListingCancelled(address indexed tokenAddress, address indexed seller);
    event TokensPurchased(
        address indexed tokenAddress, 
        address indexed buyer, 
        address indexed seller, 
        uint256 amount, 
        uint256 totalPrice
    );

    // List tokens for sale
    function listTokens(address tokenAddress, uint256 pricePerToken, uint256 amount) external {
        require(tokenAddress != address(0), "Invalid token address");
        require(pricePerToken > 0, "Price must be greater than 0");
        require(amount > 0, "Amount must be greater than 0");
        
        IERC20 token = IERC20(tokenAddress);
        
        // Check allowance
        uint256 allowance = token.allowance(msg.sender, address(this));
        require(allowance >= amount, "Not enough tokens approved for sale");
        
        // Check balance
        uint256 balance = token.balanceOf(msg.sender);
        require(balance >= amount, "Not enough tokens in your wallet");
        
        // If first time listing this token, add to array
        if (!tokenExists[tokenAddress]) {
            listedTokens.push(tokenAddress);
            tokenExists[tokenAddress] = true;
        }
        
        // Update or create listing
        listings[tokenAddress][msg.sender] = TokenListing({
            tokenAddress: tokenAddress,
            seller: msg.sender,
            pricePerToken: pricePerToken,
            availableTokens: amount,
            active: true
        });
        
        emit TokenListed(tokenAddress, msg.sender, pricePerToken, amount);
    }
    
    // Update token listing
    function updateListing(address tokenAddress, uint256 newPricePerToken, uint256 newAmount) external {
        TokenListing storage listing = listings[tokenAddress][msg.sender];
        require(listing.active, "No active listing found");
        require(listing.seller == msg.sender, "Not the seller");
        
        IERC20 token = IERC20(tokenAddress);
        
        // If increasing amount, check allowance and balance
        if (newAmount > listing.availableTokens) {
            uint256 additionalAmount = newAmount - listing.availableTokens;
            
            // Check allowance
            uint256 allowance = token.allowance(msg.sender, address(this));
            require(allowance >= additionalAmount, "Not enough tokens approved for sale");
            
            // Check balance
            uint256 balance = token.balanceOf(msg.sender);
            require(balance >= additionalAmount, "Not enough tokens in your wallet");
        }
        
        // Update listing
        listings[tokenAddress][msg.sender].pricePerToken = newPricePerToken;
        listings[tokenAddress][msg.sender].availableTokens = newAmount;
        
        emit ListingUpdated(tokenAddress, msg.sender, newPricePerToken, newAmount);
    }
    
    // Cancel a listing
    function cancelListing(address tokenAddress) external {
        TokenListing storage listing = listings[tokenAddress][msg.sender];
        require(listing.active, "No active listing found");
        require(listing.seller == msg.sender, "Not the seller");
        
        listing.active = false;
        listing.availableTokens = 0;
        
        emit ListingCancelled(tokenAddress, msg.sender);
    }
    
    // Buy tokens
    function buyTokens(address tokenAddress, address seller, uint256 amount) external payable {
        // Get the listing using the provided token address and seller address
        TokenListing storage listing = listings[tokenAddress][seller];

        // --- Pre-checks ---
        require(listing.active, "Listing is not active"); // Ensure the listing is still active
        require(amount > 0, "Amount must be greater than 0"); // Ensure buying a positive amount
        // Ensure the requested amount (in smallest units) is available in the listing
        require(amount <= listing.availableTokens, "Not enough tokens available in listing");

        // --- Get Token Details & Calculate Price ---
        // Cast the address to your specific PropertyToken contract type to access decimals()
        PropertyToken token = PropertyToken(tokenAddress);
        // Get the number of decimals for this specific token
        uint8 decimals = token.decimals();
        // Log decimals for debugging (visible in Hardhat console output)
        console.log("Contract buyTokens - Token Decimals:", decimals);

        // Calculate the total price correctly based on the listing's price per *whole* token
        // totalPrice (WEI) = (pricePerWholeToken (WEI) * amountInSmallestUnits) / (1 token in smallest units (10^decimals))
        // We need to be careful with potential division by zero if decimals is unexpectedly large, though unlikely for standard ERC20.
        uint256 decimalFactor = 10**decimals;
        require(decimalFactor > 0, "Decimal factor cannot be zero"); // Safety check
        uint256 totalPrice = (listing.pricePerToken * amount) / decimalFactor;

        // Log calculated price and received value for debugging
        console.log("Contract buyTokens - Listing Price/Token (WEI):", listing.pricePerToken);
        console.log("Contract buyTokens - Amount (Smallest Units):", amount);
        console.log("Contract buyTokens - Calculated Total Price (WEI):", totalPrice);
        console.log("Contract buyTokens - Received msg.value (WEI):", msg.value);

        // --- Check Funds Sent ---
        // Verify the buyer sent enough ETH to cover the calculated price
        require(msg.value >= totalPrice, "Insufficient funds sent");

        // --- Token Transfer ---
        // Log seller balance and marketplace allowance before attempting transfer (for debugging)
        console.log("Checking seller balance and allowance before transferFrom:");
        uint256 sellerBalance = token.balanceOf(seller);
        uint256 marketplaceAllowance = token.allowance(seller, address(this));
        console.log("   Seller Balance:", sellerBalance);
        console.log("   Marketplace Allowance:", marketplaceAllowance);
        console.log("   Amount to transfer:", amount);

        // Transfer the requested amount of tokens (in smallest units) from the seller to the buyer (msg.sender)
        // The marketplace contract needs prior approval from the seller to do this.
        bool success = token.transferFrom(seller, msg.sender, amount);
        require(success, "Token transfer failed"); // Revert if transfer fails
        console.log("Contract buyTokens - Token transfer successful.");

        // --- Update Listing State ---
        // Decrease the number of available tokens in the listing
        listing.availableTokens -= amount;
        // If no tokens are left, deactivate the listing
        if (listing.availableTokens == 0) {
            listing.active = false;
            console.log("Contract buyTokens - Listing deactivated (sold out).");
        } else {
             console.log("Contract buyTokens - Listing updated. Remaining available:", listing.availableTokens);
        }

        // --- ETH Payment to Seller ---
        // Transfer the calculated ETH price to the seller's address
        (bool sent, ) = payable(seller).call{value: totalPrice}("");
        require(sent, "Failed to send ETH to seller"); // Revert if ETH transfer fails
        console.log("Contract buyTokens - ETH sent to seller successfully.");


        // --- Refund Excess ETH ---
        // Calculate if the buyer sent more ETH than required
        uint256 excess = msg.value - totalPrice;
        if (excess > 0) {
            // If there's excess ETH, refund it to the buyer (msg.sender)
            console.log("Contract buyTokens - Refunding excess ETH:", excess);
            (sent, ) = payable(msg.sender).call{value: excess}("");
            // It's generally better not to revert on refund failure, but log it.
            // require(sent, "Failed to refund excess ETH");
             if (!sent) {
                  console.log("Warning: Failed to refund excess ETH to buyer.");
             }
        }

        // --- Emit Event ---
        // Notify listeners that a purchase occurred
        emit TokensPurchased(tokenAddress, msg.sender, seller, amount, totalPrice);
    }
    
    // Get all listed tokens
    function getAllListedTokens() external view returns (address[] memory) {
        return listedTokens;
    }
    
    // Get listing for a specific token and seller
    function getListing(address tokenAddress, address seller) external view returns (
        address, address, uint256, uint256, bool
    ) {
        TokenListing storage listing = listings[tokenAddress][seller];
        return (
            listing.tokenAddress,
            listing.seller,
            listing.pricePerToken,
            listing.availableTokens,
            listing.active
        );
    }
    
    // Check if a token is listed by any seller
    function isTokenListed(address tokenAddress) external view returns (bool) {
        return tokenExists[tokenAddress];
    }
}


Full old PropertyToken.sol:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract PropertyToken is ERC20, Ownable {
    constructor(string memory name, string memory symbol, uint256 initialSupply, address owner)
        ERC20(name, symbol)
        Ownable(owner)
    {
        _mint(owner, initialSupply * (10 ** decimals()));
    }
}

full PropertyRental.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

import "./PropertyManager.sol";
import "./PropertyToken.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract PropertyRental {
    struct RentalListing {
        address propertyTokenAddress;
        uint256 weeklyRate; // Weekly rate in wei
        bool isActive;
        uint256 lastRentedTime; // Timestamp when property was last rented
        uint256 rentalDuration; // Duration in seconds (15 seconds for demo purposes)
    }
    
    // Mapping: property token address => rental listing
    mapping(address => RentalListing) public rentalListings;
    // Array to keep track of all property tokens listed for rent
    address[] public listedProperties;
    // Mapping to check if a property is already in the listedProperties array
    mapping(address => bool) private propertyListed;
    
    PropertyManager public propertyManager;
    
    // Events
    event PropertyListedForRent(address indexed propertyTokenAddress, uint256 weeklyRate);
    event RentalListingUpdated(address indexed propertyTokenAddress, uint256 newWeeklyRate);
    event RentalListingCancelled(address indexed propertyTokenAddress);
    event PropertyRented(address indexed propertyTokenAddress, address indexed renter, uint256 amount);
    event RentDistributed(address indexed propertyTokenAddress, uint256 totalRent, uint256 tokenHolderCount);
    
    constructor(address _propertyManagerAddress) {
        propertyManager = PropertyManager(_propertyManagerAddress);
    }
    
    /**
     * @notice Lists a property for rent
     * @param propertyTokenAddress The address of the property token
     * @param weeklyRate The weekly rental rate in wei
     */
    function listPropertyForRent(address propertyTokenAddress, uint256 weeklyRate) external {
        require(weeklyRate > 0, "Rental rate must be greater than 0");
        
        // Verify the property token exists in PropertyManager
        bool propertyFound = false;
        PropertyManager.Property[] memory allProperties = propertyManager.getAllProperties();
        
        for (uint i = 0; i < allProperties.length; i++) {
            if (allProperties[i].tokenAddress == propertyTokenAddress) {
                propertyFound = true;
                break;
            }
        }
        require(propertyFound, "Property not found in PropertyManager");
        
        // Check if caller owns any tokens of this property (assuming they need at least some ownership)
        PropertyToken token = PropertyToken(propertyTokenAddress);
        require(token.balanceOf(msg.sender) > 0, "You must own tokens of this property to list it for rent");
        
        // Create or update the rental listing
        rentalListings[propertyTokenAddress] = RentalListing({
            propertyTokenAddress: propertyTokenAddress,
            weeklyRate: weeklyRate,
            isActive: true,
            lastRentedTime: 0,
            rentalDuration: 15 seconds // 15 seconds for demo purposes
        });
        
        // Add to listedProperties array if not already there
        if (!propertyListed[propertyTokenAddress]) {
            listedProperties.push(propertyTokenAddress);
            propertyListed[propertyTokenAddress] = true;
        }
        
        emit PropertyListedForRent(propertyTokenAddress, weeklyRate);
    }
    
    /**
     * @notice Updates an existing rental listing
     * @param propertyTokenAddress The address of the property token
     * @param newWeeklyRate The new weekly rental rate in wei
     */
    function updateRentalListing(address propertyTokenAddress, uint256 newWeeklyRate) external {
        require(newWeeklyRate > 0, "Rental rate must be greater than 0");
        
        RentalListing storage listing = rentalListings[propertyTokenAddress];
        require(listing.isActive, "No active rental listing found for this property");
        
        // Check if caller owns any tokens of this property
        PropertyToken token = PropertyToken(propertyTokenAddress);
        require(token.balanceOf(msg.sender) > 0, "You must own tokens of this property to update the listing");
        
        // Update the listing
        listing.weeklyRate = newWeeklyRate;
        
        emit RentalListingUpdated(propertyTokenAddress, newWeeklyRate);
    }
    
    /**
     * @notice Cancels a rental listing
     * @param propertyTokenAddress The address of the property token
     */
    function cancelRentalListing(address propertyTokenAddress) external {
        RentalListing storage listing = rentalListings[propertyTokenAddress];
        require(listing.isActive, "No active rental listing found for this property");
        
        // Check if caller owns any tokens of this property
        PropertyToken token = PropertyToken(propertyTokenAddress);
        require(token.balanceOf(msg.sender) > 0, "You must own tokens of this property to cancel the listing");
        
        // Cancel the listing
        listing.isActive = false;
        
        emit RentalListingCancelled(propertyTokenAddress);
    }
    
    /**
     * @notice Rents a property for a week (15 seconds in demo)
     * @param propertyTokenAddress The address of the property token
     */
    function rentProperty(address propertyTokenAddress) external payable {
        RentalListing storage listing = rentalListings[propertyTokenAddress];
        require(listing.isActive, "Property is not actively listed for rent");
        
        // Check if the property is currently rented
        bool isRented = listing.lastRentedTime > 0 && 
                       (block.timestamp - listing.lastRentedTime) < listing.rentalDuration;
        require(!isRented, "Property is currently rented");
        
        // Verify payment amount
        require(msg.value >= listing.weeklyRate, "Insufficient payment for rental");
        
        // Update rental status
        listing.lastRentedTime = block.timestamp;
        
        // Distribute rent to token holders
        distributeRent(propertyTokenAddress, msg.value);
        
        emit PropertyRented(propertyTokenAddress, msg.sender, msg.value);
    }
    
    /**
     * @notice Distributes rent proportionally to all token holders
     * @param propertyTokenAddress The address of the property token
     * @param rentAmount The amount of rent to distribute
     */
    function distributeRent(address propertyTokenAddress, uint256 rentAmount) private {
        PropertyToken token = PropertyToken(propertyTokenAddress);
        uint256 totalSupply = token.totalSupply();
        require(totalSupply > 0, "Total supply of tokens cannot be zero");
        
        // Get all current token holders using the new function
        address[] memory tokenHolders = token.getCurrentTokenHolders();
        require(tokenHolders.length > 0, "No token holders found to distribute rent to");
        
        uint256 totalDistributed = 0;
        uint256 remainingRent = rentAmount;
        
        // Distribute proportionally based on token ownership
        for (uint i = 0; i < tokenHolders.length; i++) {
            address holder = tokenHolders[i];
            uint256 holderBalance = token.balanceOf(holder);
            
            if (holderBalance > 0) {
                // Calculate holder's share of the rent
                uint256 share = (rentAmount * holderBalance) / totalSupply;
                
                // Make sure we don't distribute more than the rent amount due to rounding
                if (totalDistributed + share > rentAmount) {
                    share = rentAmount - totalDistributed;
                }
                
                // Transfer ETH to token holder
                if (share > 0) {
                    (bool sent, ) = payable(holder).call{value: share}("");
                    if (sent) {
                        totalDistributed += share;
                        remainingRent -= share;
                    }
                }
            }
        }
        
        // If there's any remaining rent due to rounding errors, send it to the first token holder
        if (remainingRent > 0 && tokenHolders.length > 0) {
            (bool sent, ) = payable(tokenHolders[0]).call{value: remainingRent}("");
            if (sent) {
                totalDistributed += remainingRent;
            }
        }
        
        emit RentDistributed(propertyTokenAddress, totalDistributed, tokenHolders.length);
    }
    
    /**
     * @notice Checks if a property is currently rented
     * @param propertyTokenAddress The address of the property token
     * @return bool True if the property is currently rented, false otherwise
     */
    function isPropertyRented(address propertyTokenAddress) public view returns (bool) {
        RentalListing storage listing = rentalListings[propertyTokenAddress];
        
        if (!listing.isActive) return false;
        
        return listing.lastRentedTime > 0 && 
               (block.timestamp - listing.lastRentedTime) < listing.rentalDuration;
    }
    
    /**
     * @notice Returns time remaining until a property's rental period ends
     * @param propertyTokenAddress The address of the property token
     * @return uint256 Time remaining in seconds, 0 if not rented
     */
    function getRentalTimeRemaining(address propertyTokenAddress) public view returns (uint256) {
        RentalListing storage listing = rentalListings[propertyTokenAddress];
        
        if (!listing.isActive || listing.lastRentedTime == 0) return 0;
        
        uint256 elapsedTime = block.timestamp - listing.lastRentedTime;
        if (elapsedTime >= listing.rentalDuration) return 0;
        
        return listing.rentalDuration - elapsedTime;
    }
    
    /**
     * @notice Gets all property tokens listed for rent
     * @return All property tokens that have ever been listed for rent
     */
    function getAllListedProperties() external view returns (address[] memory) {
        return listedProperties;
    }
    
    /**
     * @notice Gets all currently active rental listings
     * @return An array of RentalListing structs that are currently active
     */
    function getActiveRentalListings() external view returns (RentalListing[] memory) {
        // Count active listings
        uint256 activeCount = 0;
        for (uint i = 0; i < listedProperties.length; i++) {
            if (rentalListings[listedProperties[i]].isActive) {
                activeCount++;
            }
        }
        
        // Create result array
        RentalListing[] memory activeListings = new RentalListing[](activeCount);
        uint256 index = 0;
        
        // Populate result array
        for (uint i = 0; i < listedProperties.length; i++) {
            address propertyAddress = listedProperties[i];
            if (rentalListings[propertyAddress].isActive) {
                activeListings[index] = rentalListings[propertyAddress];
                index++;
            }
        }
        
        return activeListings;
    }
}